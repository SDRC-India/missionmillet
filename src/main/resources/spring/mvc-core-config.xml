<?xml version="1.0" encoding="UTF-8"?>
<!-- - DispatcherServlet application context for esamikshya web tier. -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/mvc   http://www.springframework.org/schema/mvc/spring-mvc.xsd
       ">

	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<!-- <property name="contentNegotiationManager" ref="cnManager" /> -->
		<property name="viewResolvers">
			<list>
				<!-- Default viewClass: JSTL view (JSP with html output) -->
				<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<!-- Example: a logical view name of 'vets' is mapped to '/WEB-INF/jsp/vets.jsp' -->
					<property name="prefix" value="/WEB-INF/views/" />
					<property name="suffix" value=".jsp" />
				</bean>

				<!-- Used here for 'xml' and 'atom' views -->
				<bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
			</list>
		</property>
	</bean>


	<!-- all resources inside folder src/main/webapp/resources are mapped so 
		they can be refered to inside JSP files (see header.jsp for more details) -->
	<mvc:resources mapping="/resources/**" location="/resources/"  cache-period="50000"/>
	
			<!-- 	============Specify View Controllers============== -->
<!-- 	<mvc:view-controller path="/home" view-name="home" /> -->
<!-- 	<mvc:view-controller path="/demoHome" view-name="demoHome" /> -->
	<mvc:view-controller path="/stateReports" view-name="stateReports" />
	<mvc:view-controller path="/ngoReport" view-name="ngoReport" />
	<mvc:view-controller path="/aggregation" view-name="/aggregation" />
	<mvc:view-controller path="/configuration" view-name="/configuration" />
	<mvc:view-controller path="/stateSoE" view-name="/stateSoE" />
	<mvc:view-controller path="/ngoSoE" view-name="/ngoSoE" />
	<mvc:view-controller path="/stateNgoSoEHistory" view-name="/stateNgoSoEHistory" />
	<mvc:view-controller path="/stateNgoSoEManage" view-name="stateNgoSoEManage"/>
	<mvc:view-controller path="/stateNgoReport" view-name="stateNgoReport"/>
	<mvc:view-controller path="/districtNgoSoEManage" view-name="districtNgoSoEManage"/>
	<mvc:view-controller path="/districtNgoSoEHistory" view-name="districtNgoSoEHistory"/>
	<mvc:view-controller path="/districtNgoReport" view-name="districtNgoReport"/>
	<mvc:view-controller path="/changepassword" view-name="changepassword"/>
	<mvc:view-controller path="/sessionExpire" view-name="sessionExpire"/>
	


	<!-- uses WebJars so Javascript and CSS libs can be declared as Maven dependencies (Bootstrap, jQuery...) -->
	<mvc:resources mapping="/webjars/**" location="classpath:/META-INF/resources/webjars/" />


	<!-- - This bean resolves specific types of exceptions to corresponding logical - view names for error views. -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- view name resolved using bean of type InternalResourceViewResolver (declared in mvc-view-config.xml) -->
		<property name="defaultErrorView" value="exception" />
		<!-- results into 'WEB-INF/jsp/exception.jsp' -->
		<property name="warnLogCategory" value="warn" />
		<!-- needed otherwise exceptions won't be logged anywhere -->
	</bean>
	

	<!-- Configure to plugin JSON as request and response in method handler -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jsonMessageConverter" />
			</list>
		</property>
	</bean>

	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<bean id="jsonMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	</bean>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	    <!-- one of the properties available; the maximum file size in bytes(5MB) -->
	    <property name="maxUploadSize" value="5242880"/>
	</bean>

</beans>
